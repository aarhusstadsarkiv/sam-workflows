name: Tests

on: [push]

jobs:
  check:
    name: Check linting & types
    runs-on: windows-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Set up poetry
        run: pip install poetry
      - name: Load cached venv
        id: cached-venv
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cached-venv.outputs.cache-hit != 'true'
      - name: Run flake8, black, and mypy
        run: |
          poetry run flake8
          poetry run black --check .
          poetry run mypy .


  # test:
  #   name: Run tests & get coverage
  #   runs-on: windows-latest
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout 
  #       uses: actions/checkout@v1
  #     - name: Set up Python 3.8
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: 3.8
  #     - name: Set up poetry
  #       uses: snok/install-poetry@v1.1.1
  #       with:
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true
  #     - name: Set up cache
  #       uses: actions/cache@v2
  #       with:
  #         path: .venv
  #         key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
  #     - name: Install dependencies
  #       run: poetry install
      # - name: Test and generate coverage report
      #   run: |
      #     source $HOME/.poetry/env
      #     poetry run pytest --cov=project_name --cov-report=xml
      # - name: Upload to codecov
      #   uses: codecov/codecov-action@v1
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     fail_ci_if_error: true
